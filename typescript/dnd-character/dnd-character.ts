// Step 1 - Problem Understanding

// What are the inputs ?
// None (the generator creates random values internally)

// What are the outputs ?
// The character object with the following properties:
// - strength
// - dexterity
// - constitution
// - intelligence
// - wisdom
// - charisma
// - hitpoints

// What are the rules?
// - Each of the six abilities is determined by rolling four 6-sided dice and summing the three highest values.
// - Hitpoints are calculated as 10 + constitution modifier.
// - The constitution modifier is calculated by subtracting 10 from the constitution score, dividing by 2, and rounding down.

// What is the mental model?
// - Think of this as generating random scores for six abilities in a game.
// Each score is generated by rolling dice, with some conditions on which dice are counted.
// Based on one ability (constitution), we calculate a modifier that impacts the character's hitpoints.

// Step 2 - Examples and Test Cases

// Example 1 (Typical Case):
/* Rolls for Strength: [5, 3, 1, 6] → Discard 1 → Sum: 14
Rolls for Dexterity: [3, 2, 5, 3] → Discard 2 → Sum: 11
Rolls for Constitution: [1, 1, 1, 1] → Discard 1 → Sum: 3
Rolls for Intelligence: [2, 1, 6, 6] → Discard 1 → Sum: 14
Rolls for Wisdom: [3, 5, 3, 4] → Discard 3 → Sum: 12
Rolls for Charisma: [6, 6, 6, 6] → Discard 6 → Sum: 18

Constitution = 3 → Modifier = (3 - 10) / 2 = -4
Hitpoints = 10 + (-4) = 6
*/

// Example 2 (Edge Case: Low Rolls):
/* Rolls for Strength: [1, 1, 1, 1] → Discard 1 → Sum: 3
Rolls for Dexterity: [2, 2, 2, 2] → Discard 2 → Sum: 6
Rolls for Constitution: [2, 2, 2, 2] → Discard 2 → Sum: 6
Rolls for Intelligence: [1, 1, 2, 2] → Discard 1 → Sum: 5
Rolls for Wisdom: [1, 2, 3, 4] → Discard 1 → Sum: 9
Rolls for Charisma: [1, 1, 1, 1] → Discard 1 → Sum: 3

Constitution = 6 → Modifier = (6 - 10) / 2 = -2
Hitpoints = 10 + (-2) = 8
*/

// Example 3 (High Rolls):
/* Rolls for Strength: [6, 6, 6, 5] → Discard 5 → Sum: 18
Rolls for Dexterity: [6, 6, 6, 6] → Discard 6 → Sum: 18
Rolls for Constitution: [5, 6, 6, 6] → Discard 5 → Sum: 18
Rolls for Intelligence: [6, 5, 4, 6] → Discard 4 → Sum: 17
Rolls for Wisdom: [6, 6, 5, 5] → Discard 5 → Sum: 17
Rolls for Charisma: [6, 6, 6, 5] → Discard 5 → Sum: 18

Constitution = 18 → Modifier = (18 - 10) / 2 = 4
Hitpoints = 10 + 4 = 14
*/

// Step 3 - Data Structure Selection

// Class (DnDCharacter): This is the most suitable data structure as it encapsulates all the character's attributes (abilities and hitpoints) and the logic to generate them (constructor and static methods).

// Why it's optimal:
// Encapsulation: Bundles data and behavior together.
// Reusability: Can easily create multiple characters.
// Readability: Clearly represents the concept of a D&D character.

// Step 4 - Algorithm Design:

// 1. Create a new character object
// 2. For each ability (strength, dexterity, constitution, intelligence, wisdom, charisma):
//    a. Roll 4 six-sided dice
//    b. Sort the rolls in ascending order
//    c. Sum the highest 3 rolls
//    d. Assign the sum to the corresponding ability
// 3. Calculate the constitution modifier:
//    a. Subtract 10 from the constitution score
//    b. Divide the result by 2
//    c. Round down to the nearest integer
// 4.Calculate hitpoints:
//    a. Start with a base of 10
//    b. Add the constitution modifier
// 5. Return the complete character object

// Step 5 - Implementation:
export class DnDCharacter {
  readonly strength: number;
  readonly dexterity: number;
  readonly constitution: number;
  readonly intelligence: number;
  readonly wisdom: number;
  readonly charisma: number;
  readonly hitpoints: number;

  constructor() {
    this.strength = DnDCharacter.generateAbilityScore();
    this.dexterity = DnDCharacter.generateAbilityScore();
    this.constitution = DnDCharacter.generateAbilityScore();
    this.intelligence = DnDCharacter.generateAbilityScore();
    this.wisdom = DnDCharacter.generateAbilityScore();
    this.charisma = DnDCharacter.generateAbilityScore();
    this.hitpoints = 10 + DnDCharacter.getModifierFor(this.constitution);
  }

  public static generateAbilityScore(): number {
    const rolls: number[] = [...Array(4)].map((_) =>
      this.generateRandomDiceRollScore()
    );

    return rolls
      .sort((a, b) => a - b)
      .slice(0, 3)
      .reduce((n, sum) => sum + n);
  }

  public static getModifierFor(abilityValue: number): number {
    return Math.floor((abilityValue - 10) / 2);
  }

  private static generateRandomDiceRollScore(): number {
    return Math.floor(Math.random() * 6) + 1;
  }
}
